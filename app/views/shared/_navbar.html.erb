<nav class="navbar">
  <div class="container">
    <a href="/" class="navbar-brand">
      <img src="<%= asset_path('Sloop.png') %>" alt="Logo" />

    <div class="navbar-menu">
      <div class="navbar-links">
        <%= link_to "NEW SLOOP", new_sloopy_path, class: "btn-orange scroll", data: { turbo: false } %>
        <a href="#" class="btn-navbar">WHO WE ARE</a>
        <%= link_to "MY SLOOPIES", sloopies_path, class: "btn-navbar" %>
        <a href="#" class="btn-navbar">SLOOPY FEED</a>
      </div>
    </div>

<div class="user-dropdown">
  <% if user_signed_in? %>
    <button class="btn dropdown-toggle" id="userDropdown" aria-expanded="false">
      <%= current_user.nickname %>
    </button>
    <ul class="dropdown-menu" aria-labelledby="userDropdown">
      <li><a href="<%= profile_path %>" class="dropdown-item">My Profile</a></li>
      <li><%= link_to "Log out", destroy_user_session_path, class: "dropdown-item", data: { turbo_method: :delete } %></li>
    </ul>
  <% else %>
    <div class="auth-links">
      <a href="<%= new_user_session_path %>" class="btn">Log In</a>
      <a href="<%= new_user_registration_path %>" class="btn">Sign Up</a>
    </div>
  <% end %>
</div>
  </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', initDropdownMenu);
document.addEventListener('turbo:load', initDropdownMenu); // Compatible avec Turbo

function initDropdownMenu() {
  const dropdownButton = document.getElementById('userDropdown');
  const dropdownMenu = document.querySelector('.user-dropdown .dropdown-menu');

  if (dropdownButton && dropdownMenu) {
    // Réinitialiser le menu
    dropdownButton.setAttribute('aria-expanded', 'false');
    dropdownButton.classList.remove('active');
    dropdownMenu.style.display = 'none';

    // Supprimer tous les anciens gestionnaires pour éviter les doublons
    dropdownButton.replaceWith(dropdownButton.cloneNode(true));
    dropdownMenu.replaceWith(dropdownMenu.cloneNode(true));

    const newDropdownButton = document.getElementById('userDropdown');
    const newDropdownMenu = document.querySelector('.user-dropdown .dropdown-menu');

    // Ajouter des gestionnaires d'événements frais
    newDropdownButton.addEventListener('click', (e) => {
      e.stopPropagation();
      const isExpanded = newDropdownButton.getAttribute('aria-expanded') === 'true';
      newDropdownButton.setAttribute('aria-expanded', !isExpanded);
      newDropdownMenu.style.display = isExpanded ? 'none' : 'block';
      newDropdownButton.classList.toggle('active', !isExpanded);
    });

    document.addEventListener('click', () => {
      newDropdownMenu.style.display = 'none';
      newDropdownButton.setAttribute('aria-expanded', 'false');
      newDropdownButton.classList.remove('active');
    });

    newDropdownMenu.addEventListener('mouseenter', () => {
      newDropdownMenu.style.display = 'block';
      newDropdownButton.classList.add('active');
    });

    newDropdownMenu.addEventListener('mouseleave', () => {
      newDropdownMenu.style.display = 'none';
      newDropdownButton.setAttribute('aria-expanded', 'false');
      newDropdownButton.classList.remove('active');
    });
  }
}
</script>
